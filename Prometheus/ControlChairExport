{"slots":{"0":{"name":"spacefueltank_1","type":{"events":[],"methods":[]}},"1":{"name":"gyro","type":{"events":[],"methods":[]}},"2":{"name":"core","type":{"events":[],"methods":[]}},"3":{"name":"warpdrive","type":{"events":[],"methods":[]}},"4":{"name":"atmofueltank_1","type":{"events":[],"methods":[]}},"5":{"name":"screen","type":{"events":[],"methods":[]}},"6":{"name":"telemeter","type":{"events":[],"methods":[]}},"7":{"name":"xs_screen","type":{"events":[],"methods":[]}},"8":{"name":"forcefield","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"10":{"name":"slot11","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- category panel display helpers\n_autoconf = {}\n_autoconf.panels = {}\n_autoconf.panels_size = 0\n_autoconf.displayCategoryPanel = function(elements, size, title, type, widgetPerData)\n    widgetPerData = widgetPerData or false -- default to one widget for all data\n    if size > 0 then\n        local panel = system.createWidgetPanel(title)\n        local widget\n        if not widgetPerData then\n            widget = system.createWidget(panel, type)\n        end\n        for i = 1, size do\n            if widgetPerData then\n                widget = system.createWidget(panel, type)\n            end\n            system.addDataToWidget(elements[i].getDataId(), widget)\n        end\n        _autoconf.panels_size = _autoconf.panels_size + 1\n        _autoconf.panels[_autoconf.panels_size] = panel\n    end\nend\n_autoconf.hideCategoryPanels = function()\n    for i=1,_autoconf.panels_size do\n        system.destroyWidgetPanel(_autoconf.panels[i])\n    end\nend\n-- Proxy array to access auto-plugged slots programmatically\nspacefueltank = {}\nspacefueltank[1] = spacefueltank_1\nspacefueltank_size = 1\n\nrocketfueltank = {}\nrocketfueltank_size = 0\n\nradar = {}\nradar_size = 0\n\nweapon = {}\nweapon_size = 0\n\natmofueltank = {}\natmofueltank[1] = atmofueltank_1\natmofueltank_size = 1\n-- End of auto-generated code\nNav = Navigator.new(system, core, unit)\nNav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})\nNav.axisCommandManager:setTargetGroundAltitude(0)\n\n-- element widgets\n-- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.\n_autoconf.displayCategoryPanel(weapon, weapon_size, \"Weapons\", \"weapon\", true)\n\n--core.show()\n\n_autoconf.displayCategoryPanel(radar, radar_size, \"Periscope\", \"periscope\")\nplaceRadar = true\n\n--if atmofueltank_size > 0 then\n--    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, \"Atmo Fuel\", \"fuel_container\")\n--    if placeRadar then\n--        _autoconf.displayCategoryPanel(radar, radar_size, \"Radar\", \"radar\")\n--        placeRadar = false\n--    end\n--end\n\n--if spacefueltank_size > 0 then\n--    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, \"Space Fuel\", \"fuel_container\")\n--    if placeRadar then\n--        _autoconf.displayCategoryPanel(radar, radar_size, \"Radar\", \"radar\")\n--        placeRadar = false\n--   end\n--end\n_autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, \"Rocket Fuel\", \"fuel_container\")\nif placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels\n    _autoconf.displayCategoryPanel(radar, radar_size, \"Radar\", \"radar\")\n    placeRadar = false\nend\nif antigrav ~= nil then antigrav.show() end\nif warpdrive ~= nil then warpdrive.show() end\n-- if gyro ~= nil then gyro.show() end\n\n-- freeze the player in he is remote controlling the construct\nif Nav.control.isRemoteControlled() == 1 then\n    system.freeze(1)\nend\n\n-- landing gear\n-- make sure every gears are synchonized with the first\ngearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean\nif gearExtended then\n    Nav.control.extendLandingGears()\nelse\n    Nav.control.retractLandingGears()\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"_autoconf.hideCategoryPanels()\nif antigrav ~= nil then antigrav.hide() end\nif warpdrive ~= nil then warpdrive.hide() end\nif gyro ~= nil then gyro.hide() end\ncore.hide()\nNav.control.switchOffHeadlights()\n\n-- Reset all attached screens\nscreen.setCenteredText(\"IVS Prometheus\")\nxs_screen.setCenteredText(\"IVS Prometheus\")","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"pitchInput = 0\nrollInput = 0\nyawInput = 0\nbrakeInput = 0\n\n-- Screen - Fuel Gauges\n\nlastUpdate = 0.0\nlocal find = string.find\n \nfunction getJsonNum (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n-- HUD\n\nrequire(\"Helpers\")\n\nsystem.showScreen(1)\n\nfunction getRelativePitch(velocity) \n    return math.deg(math.atan(velocity[2], velocity[3])) - 90\nend\n\nfunction getRelativeYaw(velocity) \n    return math.deg(math.atan(velocity[2], velocity[1])) - 90\nend\n\nfunction updateHud()\n    local altitude = core.getAltitude()\n    local velocity = core.getVelocity()\n    local speed = vec3(velocity):len()\n    local worldV = vec3(core.getWorldVertical())\n    local constrF = vec3(core.getConstructWorldOrientationForward())\n    local constrR = vec3(core.getConstructWorldOrientationRight())\n    local constrV = vec3(core.getConstructWorldOrientationUp())\n    local throttle = unit.getThrottle()\n\n    local pitch = gyro.getPitch()--180 - getRoll(worldV, constrR, constrF)\n    local roll = gyro.getRoll()--getRoll(worldV, constrF, constrR)\n    local bottomText = \"ROLL\"\n    local mode = 0\n\n    if (altitude == 0) then\n        mode = 1\n    else\n        mode = 0\n    end\n\n    if (mode == 1) then\n        if (speed > 5) then\n            pitch = getRelativePitch(velocity)\n            roll = getRelativeYaw(velocity)\n        else\n            pitch = 0\n            roll = 0\n        end\n        bottomText = \"YAW\"\n    end\n\n    content = [[\n    <head>\n        <style>\n            body {margin: 0}\n            svg {display:block; position:absolute; top:0; left:0} \n            .majorLine {stroke:aqua;opacity:0.7;stroke-width:3;fill-opacity:0;}\n            .minorLine {stroke:aqua;opacity:0.3;stroke-width:3;fill-opacity:0;}\n            .text {fill:aqua;font-family:Montserrat;font-weight:bold}\n\n            #space {}\n            #ecu {}\n            #atmos {}\n            \n\n        </style>\n    </head>\n    <body>\n        <svg height=\"100%\" width=\"100%\" viewBox=\"0 0 1920 1080\">\n            <g class=\"majorLine\">\n                <line x1=\"939\" y1=\"537\" x2=\"957\" y2=\"519\"/>\n                <line x1=\"939\" y1=\"543\" x2=\"957\" y2=\"561\"/>\n                <line x1=\"981\" y1=\"537\" x2=\"963\" y2=\"519\"/>\n                <line x1=\"981\" y1=\"543\" x2=\"963\" y2=\"561\"/>\n\n                <line x1=\"932\" y1=\"540\" x2=\"945\" y2=\"540\"/>\n                <line x1=\"988\" y1=\"540\" x2=\"975\" y2=\"540\"/>\n                <line x1=\"960\" y1=\"512\" x2=\"960\" y2=\"525\"/>\n                <line x1=\"960\" y1=\"568\" x2=\"960\" y2=\"555\"/>\n\n                <g style=\"opacity:0.2\">\n                    <line x1=\"920\" y1=\"540\" x2=\"840\" y2=\"540\"/>\n                    <line x1=\"1000\" y1=\"540\" x2=\"1080\" y2=\"540\"/>\n                    <line x1=\"960\" y1=\"500\" x2=\"960\" y2=\"470\"/>\n                    <line x1=\"960\" y1=\"580\" x2=\"960\" y2=\"610\"/>\n                </g>\n\n                <path d=\"M 700 0 L 740 35 Q 960 55 1180 35 L 1220 0\"/>\n                <path d=\"M 792 550 L 785 550 L 785 650 L 792 650\"/>\n            </g>\n            \n\n            <g>\n                <polygon points=\"782,540 800,535 800,545\" style=\"fill:rgb(42, 234, 248);opacity:0.7\"/>\n                <polygon points=\"1138,540 1120,535 1120,545\" style=\"fill:rgb(42, 234, 248);opacity:0.7\"/>\n                <polygon points=\"960,725 955,707 965,707\" style=\"fill:rgb(42, 234, 248);opacity:0.7\"/>\n            </g>\n                \n            <g class=\"text\">\n                <g font-size=10>\n                    <text x=\"785\" y=\"530\" text-anchor=\"start\">PITCH</text>\n                    <text x=\"1135\" y=\"530\" text-anchor=\"end\">PITCH</text>\n                    <text x=\"960\" y=\"688\" text-anchor=\"middle\">ROLL</text>\n                    <text x=\"790\" y=\"660\" text-anchor=\"start\">THRL</text>\n                </g>\n                <g font-size=15>\n                    <text x=\"1020\" y=\"33\" text-anchor=\"middle\" id=\"space\">SPACE</text>\n                    <text x=\"900\" y=\"33\" text-anchor=\"middle\" id=\"atmos\">ATMOS</text>\n                    <text x=\"960\" y=\"35\" text-anchor=\"middle\" id=\"ecu\">ECU</text>\n                </g>\n            \n            </g>]]\n    \n    \n    pitchC = math.floor(pitch)\n    for i = pitchC-25,pitchC+25 do\n        if (i%10==0) then\n            num = i\n            if (num > 180) then\n                num = -180 + 10*(i-18)\n            elseif (num < -170) then\n                num = 180 + 10*(i+18)\n            end\n\n            content = content..[[<g transform=\"translate(0 ]]..(-i*5 + pitch*5)..[[)\">\n                <text x=\"745\" y=\"540\" style=\"fill:rgb(1, 165, 177);text-anchor:end;font-size:12;font-family:Montserrat;font-weight:bold\">]]..num..[[</text>\n                <text x=\"1175\" y=\"540\" style=\"fill:rgb(1, 165, 177);text-anchor:start;font-size:12;font-family:Montserrat;font-weight:bold\">]]..num..[[</text></g>]]\n        end\n\n        len = 5\n        if (i%10==0) then\n            len = 30\n        elseif (i%5==0) then\n            len = 15\n        end\n\n        content = content..[[\n        <g transform=\"translate(0 ]]..(-i*5 + pitch*5)..[[)\">\n            <line x1=\"]]..(780-len)..[[\" y1=\"540\" x2=\"780\" y2=\"540\"style=\"stroke:rgb(1, 165, 177);opacity:0.3;stroke-width:3\"/>\n            <line x1=\"]]..(1140+len)..[[\" y1=\"540\" x2=\"1140\" y2=\"540\"style=\"stroke:rgb(1, 165, 177);opacity:0.3;stroke-width:3\"/></g>]]\n\n    end\n\n    rollC = math.floor(roll)\n    for i = rollC-35,rollC+35 do\n        if (i%10==0) then\n            num = math.abs(i)\n            if (num > 180) then\n                num = 180 + (180-num) \n            end\n            content = content..[[<g transform=\"rotate(]]..(i - roll)..[[,960,460)\">\n            <text x=\"960\" y=\"760\" style=\"fill:rgb(1, 165, 177);text-anchor:middle;font-size:12;font-family:Montserrat;font-weight:bold\">]]..num..[[</text></g>]]\n        end\n\n        len = 5\n        if (i%10==0) then\n            len = 15\n        elseif (i%5==0) then\n            len = 10\n        end\n\n        content = content..[[<g transform=\"rotate(]]..(i - roll)..[[,960,460)\">\n        <line x1=\"960\" y1=\"730\" x2=\"960\" y2=\"]]..(730+len)..[[\" style=\"stroke:rgb(1, 165, 177);opacity:0.3;stroke-width:2\"/></g>]]\n    end\n    \n    -- -unit.getThrottle()*0.97\n    content = content..[[<g transform=\"translate(0 ]]..(-50)..[[)\">\n            <polygon points=\"788,650 800,647 800,653\" style=\"fill:rgb(1, 165, 177);opacity:0.7\"/>\n        </g>]]\n    \n\tcontent = content..[[<g transform=\"translate(0 ]]..(-50 + (-throttle/2))..[[)\">\n                        <polygon points=\"788,650 800,647 800,653\" style=\"fill:rgb(1, 165, 177);opacity:0.7\"/>\n                    </g>]]\n    \n        -- Add Telemetry as Radar Alt to the HUD\n        -- slot name: telemeter\n        radarAlt = math.floor(telemeter.getDistance() - 2)\n\n        if ( 0 <= radarAlt) then\n          content = content..[[<g font-size=15>\n            <text x=\"700\" y=\"400\" style=\"fill:rgb(1, 165, 177); text-anchor=\"start\">Radar Alt: ]]..radarAlt..[[</text>\n          </g>]]\n        end\n    \n    content = content..[[\n\n        </svg>\n    </body>\n    ]]\n    system.setScreen(content)\nend","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"2"},{"code":"gearExtended = not gearExtended\nif gearExtended then\n    Nav.control.extendLandingGears()\nelse\n    Nav.control.retractLandingGears()\nend\n","filter":{"args":[{"value":"gear"}],"signature":"actionStart(gear)","slotKey":"-2"},"key":"3"},{"code":"if Nav.control.isAnyHeadlightSwitchedOn() == 1 then\n    Nav.control.switchOffHeadlights()\nelse\n    Nav.control.switchOnHeadlights()\nend\n","filter":{"args":[{"value":"light"}],"signature":"actionStart(light)","slotKey":"-2"},"key":"4"},{"code":"-- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu\n\nlocal pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nlocal rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01\nlocal brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)\nlocal autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01\n\nlocal turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is\nlocal turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\nlocal torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\n-- validate params\npitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)\nyawSpeedFactor = math.max(yawSpeedFactor, 0.01)\nrollSpeedFactor = math.max(rollSpeedFactor, 0.01)\ntorqueFactor = math.max(torqueFactor, 0.01)\nbrakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)\nbrakeFlatFactor = math.max(brakeFlatFactor, 0.01)\nautoRollFactor = math.max(autoRollFactor, 0.01)\nturnAssistFactor = math.max(turnAssistFactor, 0.01)\n\n-- final inputs\nlocal finalPitchInput = pitchInput + system.getControlDeviceForwardInput()\nlocal finalRollInput = rollInput + system.getControlDeviceYawInput()\nlocal finalYawInput = yawInput - system.getControlDeviceLeftRightInput()\nlocal finalBrakeInput = brakeInput\n\n-- Axis\nlocal worldVertical = vec3(core.getWorldVertical()) -- along gravity\nlocal constructUp = vec3(core.getConstructWorldOrientationUp())\nlocal constructForward = vec3(core.getConstructWorldOrientationForward())\nlocal constructRight = vec3(core.getConstructWorldOrientationRight())\nlocal constructVelocity = vec3(core.getWorldVelocity())\nlocal constructVelocityDir = vec3(core.getWorldVelocity()):normalize()\nlocal currentRollDeg = getRoll(worldVertical, constructForward, constructRight)\nlocal currentRollDegAbs = math.abs(currentRollDeg)\nlocal currentRollDegSign = utils.sign(currentRollDeg)\n\n-- Rotation\nlocal constructAngularVelocity = vec3(core.getWorldAngularVelocity())\nlocal targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight\n                                + finalRollInput * rollSpeedFactor * constructForward\n                                + finalYawInput * yawSpeedFactor * constructUp\n\n-- In atmosphere?\nif worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then\n    local autoRollRollThreshold = 1.0\n    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling\n    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then\n        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit\n        if (rollPID == nil) then\n            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range\n        end\n        rollPID:inject(targetRollDeg - currentRollDeg)\n        local autoRollInput = rollPID:get()\n\n        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward\n    end\n    local turnAssistRollThreshold = 20.0\n    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing\n    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then\n        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range\n        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range\n\n        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)\n        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180\n        local rollVerticalRatio = 0\n        if rescaleRollDegAbs < 90 then\n            rollVerticalRatio = rescaleRollDegAbs / 90\n        elseif rescaleRollDegAbs < 180 then\n            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90\n        end\n\n        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio\n\n        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)\n        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio\n\n        targetAngularVelocity = targetAngularVelocity\n                            + turnAssistPitchInput * constructRight\n                            + turnAssistYawInput * constructUp\n    end\nend\n\n-- Engine commands\nlocal keepCollinearity = 1 -- for easier reading\nlocal dontKeepCollinearity = 0 -- for easier reading\nlocal tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities\n\n-- Rotation\nlocal angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)\nlocal airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())\nangularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction\nNav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)\n\n-- Brakes\nlocal brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)\nNav:setEngineForceCommand('brake', brakeAcceleration)\n\n-- AutoNavigation regroups all the axis command by 'TargetSpeed'\nlocal autoNavigationEngineTags = ''\nlocal autoNavigationAcceleration = vec3()\nlocal autoNavigationUseBrake = false\n\n-- Longitudinal Translation\nlocal longitudinalEngineTags = 'thrust analog longitudinal'\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byThrottle) then\n    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)\n    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)\nelseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration\n    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop\n        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking\n    then\n        autoNavigationUseBrake = true\n    end\n\nend\n\n-- Lateral Translation\nlocal lateralStrafeEngineTags = 'thrust analog lateral'\nlocal lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)\nif (lateralCommandType == axisCommandType.byThrottle) then\n    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)\n    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)\nelseif  (lateralCommandType == axisCommandType.byTargetSpeed) then\n    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration\nend\n\n-- Vertical Translation\nlocal verticalStrafeEngineTags = 'thrust analog vertical'\nlocal verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)\nif (verticalCommandType == axisCommandType.byThrottle) then\n    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)\n    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)\nelseif  (verticalCommandType == axisCommandType.byTargetSpeed) then\n    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)\n    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags\n    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration\nend\n\n-- Auto Navigation (Cruise Control)\nif (autoNavigationAcceleration:len() > constants.epsilon) then\n    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward\n    then\n        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'\n    end\n    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)\nend\n\n-- Rockets\nNav:setBoosterCommand('rocket_engine')\n","filter":{"args":[],"signature":"flush()","slotKey":"-2"},"key":"5"},{"code":"Nav:update()\nupdateHud()\n\nif (Nav.control.isAnyLandingGearExtended() == 1) then\n    gearState = \"Gear Down\"\nelse\n    gearState = \"Gear Up\"\nend\n\nif (forcefield.getState() == 1) then\n    forceFieldState = \"Forcefield Active\"\nelse\n    forceFieldState = \"Forcefield Deactive\"\nend\n\nxs_screen.setCenteredText(gearState..\"<br />\"..forceFieldState)\n\n-- Screen - Fuel Gauges\nlocal atmoFuelTankPercentage = nil\nlocal atmoFuelTankTimeLeft = nil\nlocal spaceFuelTankPercentage = nil\nlocal spaceFuelTankTimeLeft = nil\nfor i = 1, atmofueltank_size do\n    atmoFuelTankPercentage = getJsonNum(atmofueltank[i].getData(), \"percentage\")\n    if atmoFuelTankPercentage == nil then\n        atmoFuelTankPercentage = \"0\"\n    end\n \n    atmoFuelTankTimeLeft = getJsonNum(atmofueltank[i].getData(), \"timeLeft\")\n    if atmoFuelTankTimeLeft == nil then\n        atmoFuelTankTimeLeft = \"0\"\n    end\n \n    time1 = atmoFuelTankTimeLeft;\n    local days = time1 // (24 * 3600)\n    time1 = time1 % (24 * 3600)\n    local hours = time1 // 3600\n    time1 = time1 % 3600\n    local mins = time1 // 60\n    time1 = time1 % 60\n    local secs = time1;\n \n    atmoFuelTankTimeLeft = tonumber(string.format(\"%.\" .. (0) .. \"f\", days)) .. \"d:\" .. tonumber(string.format(\"%.\" .. (0) .. \"f\", hours)) .. \"h:\" .. tonumber(string.format(\"%.\" .. (0) .. \"f\", mins)) .. \"m:\" .. tonumber(string.format(\"%.\" .. (0) .. \"f\", secs)) .. \"s\"\nend\n \nfor i = 1, spacefueltank_size do\n    spaceFuelTankPercentage = getJsonNum(spacefueltank[i].getData(), \"percentage\")\n    if spaceFuelTankPercentage == nil then\n        spaceFuelTankPercentage = \"0\"\n    end\n \n    spaceFuelTankTimeLeft = getJsonNum(spacefueltank[i].getData(), \"timeLeft\")\n    if spaceFuelTankTimeLeft == nil then\n        spaceFuelTankTimeLeft = \"0\"\n    end\n \n    time2 = spaceFuelTankTimeLeft;\n    local days = time2 // (24 * 3600)\n    time2 = time2 % (24 * 3600)\n    local hours = time2 // 3600\n    time2 = time2 % 3600\n    local mins = time2 // 60\n    time2 = time2 % 60\n    local secs = time2;\n \n    spaceFuelTankTimeLeft = tonumber(string.format(\"%.\" .. (0) .. \"f\", days)) .. \"d:\" .. tonumber(string.format(\"%.\" .. (0) .. \"f\", hours)) .. \"h:\" .. tonumber(string.format(\"%.\" .. (0) .. \"f\", mins)) .. \"m:\" .. tonumber(string.format(\"%.\" .. (0) .. \"f\", secs)) .. \"s\"\nend\n \n--CHANGE SCREEN TO YOUR SCREEN NAME\nscreen.setHTML([[\n \n<style>\n    * {\n      box-sizing: border-box\n    }\n \n    .mCon {\n      margin:50px;\n      margin-top:20px;\n      font-size:70px;\n    }\n \n    .container {\n      width: 100%;\n      background-color: #787878;\n    }\n \n    .tanks {\n      text-align: right;\n      padding-top: 10px;\n      padding-bottom: 10px;\n      color: white;\n      height: 100px;\n    }\n \n    .atmo {\n      width: ]] .. atmoFuelTankPercentage ..[[%; \n      background-color: #195179;\n    }\n    .space {\n      width: ]] .. spaceFuelTankPercentage ..[[%; \n      background-color: #a92d15;\n    }\n \n</style>\n<div class=\"mCon\">\n \n\t<div style=\"text-align:center;\">Fuel Tanks</div>\n\t<div class=\"container\">\n\t  <div class=\"tanks atmo\">]] .. atmoFuelTankPercentage .. [[%</div>\n\t</div>\n \n\t<div class=\"container\">\n\t  <div class=\"tanks space\">]] .. spaceFuelTankPercentage ..[[%</div>\n\t</div>\n \n\t<hr style=\"margin-bottom:0px;\">\n\t<div style=\"font-size:50px;margin-left:40px\">Atmo Fuel Tank</div>\n\t<div class=\"mCon\" style=\"text-align:center;font-size:50px;margin-top:5px;\">\n\t\tDuration: ]] .. atmoFuelTankTimeLeft ..[[\n\t</div>\n\t<hr style=\"margin-bottom:0px;margin-top:-25px;\">\n\t<div style=\"font-size:50px;margin-left:40px\">Space Fuel Tank</div>\n\t<div class=\"mCon\" style=\"text-align:center;font-size:50px;margin-top:5px;\">\n\t\tDuration: ]] .. spaceFuelTankTimeLeft ..[[\n\t</div>\n</div>\n \n]])","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"6"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"forward"}],"signature":"actionStart(forward)","slotKey":"-2"},"key":"7"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"forward"}],"signature":"actionStop(forward)","slotKey":"-2"},"key":"8"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"backward"}],"signature":"actionStart(backward)","slotKey":"-2"},"key":"9"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"backward"}],"signature":"actionStop(backward)","slotKey":"-2"},"key":"10"},{"code":"rollInput = rollInput + 1","filter":{"args":[{"value":"left"}],"signature":"actionStop(left)","slotKey":"-2"},"key":"11"},{"code":"rollInput = rollInput - 1","filter":{"args":[{"value":"left"}],"signature":"actionStart(left)","slotKey":"-2"},"key":"12"},{"code":"rollInput = rollInput - 1","filter":{"args":[{"value":"right"}],"signature":"actionStop(right)","slotKey":"-2"},"key":"13"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)","filter":{"args":[{"value":"straferight"}],"signature":"actionStart(straferight)","slotKey":"-2"},"key":"14"},{"code":"rollInput = rollInput + 1","filter":{"args":[{"value":"right"}],"signature":"actionStart(right)","slotKey":"-2"},"key":"15"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)","filter":{"args":[{"value":"strafeleft"}],"signature":"actionStart(strafeleft)","slotKey":"-2"},"key":"16"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)","filter":{"args":[{"value":"straferight"}],"signature":"actionStop(straferight)","slotKey":"-2"},"key":"17"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)","filter":{"args":[{"value":"strafeleft"}],"signature":"actionStop(strafeleft)","slotKey":"-2"},"key":"18"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"down"}],"signature":"actionStop(down)","slotKey":"-2"},"key":"19"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionStart(groundaltitudeup)","slotKey":"-2"},"key":"20"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionLoop(groundaltitudeup)","slotKey":"-2"},"key":"21"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionStart(groundaltitudedown)","slotKey":"-2"},"key":"22"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionLoop(groundaltitudedown)","slotKey":"-2"},"key":"23"},{"code":"yawInput = yawInput + 1","filter":{"args":[{"value":"yawleft"}],"signature":"actionStart(yawleft)","slotKey":"-2"},"key":"24"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"yawright"}],"signature":"actionStart(yawright)","slotKey":"-2"},"key":"25"},{"code":"yawInput = yawInput + 1","filter":{"args":[{"value":"yawright"}],"signature":"actionStop(yawright)","slotKey":"-2"},"key":"26"},{"code":"brakeInput = brakeInput + 1\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"actionStart(brake)","slotKey":"-2"},"key":"27"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"yawleft"}],"signature":"actionStop(yawleft)","slotKey":"-2"},"key":"28"},{"code":"Nav:toggleBoosters()","filter":{"args":[{"value":"booster"}],"signature":"actionStart(booster)","slotKey":"-2"},"key":"29"},{"code":"local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"actionLoop(brake)","slotKey":"-2"},"key":"30"},{"code":"brakeInput = brakeInput - 1","filter":{"args":[{"value":"brake"}],"signature":"actionStop(brake)","slotKey":"-2"},"key":"31"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)","filter":{"args":[{"value":"speedup"}],"signature":"actionStart(speedup)","slotKey":"-2"},"key":"32"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)","filter":{"args":[{"value":"speedup"}],"signature":"actionLoop(speedup)","slotKey":"-2"},"key":"33"},{"code":"Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)","filter":{"args":[{"value":"stopengines"}],"signature":"actionStart(stopengines)","slotKey":"-2"},"key":"34"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)","filter":{"args":[{"value":"speeddown"}],"signature":"actionLoop(speeddown)","slotKey":"-2"},"key":"35"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)","filter":{"args":[{"value":"speeddown"}],"signature":"actionStart(speeddown)","slotKey":"-2"},"key":"36"},{"code":"if warpdrive ~= nil then warpdrive.activateWarp() end","filter":{"args":[{"value":"warp"}],"signature":"actionStart(warp)","slotKey":"-2"},"key":"37"},{"code":"if antigrav ~= nil then antigrav.toggle() end","filter":{"args":[{"value":"antigravity"}],"signature":"actionStart(antigravity)","slotKey":"-2"},"key":"38"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)\n","filter":{"args":[{"value":"down"}],"signature":"actionStart(down)","slotKey":"-2"},"key":"39"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"up"}],"signature":"actionStop(up)","slotKey":"-2"},"key":"40"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)\n","filter":{"args":[{"value":"up"}],"signature":"actionStart(up)","slotKey":"-2"},"key":"41"}],"methods":[],"events":[]}
